import React from "react";
import { Bar } from "react-chartjs-2";
import {
  Chart,
  Tooltip,
  BarElement,
  CategoryScale,
  LinearScale,
} from "chart.js";

Chart.register(Tooltip, BarElement, CategoryScale, LinearScale);

const StackedBarChart = () => {
  const data = [20, 30, 40];
  const prevData = [115, 25, 35];

  const chartData = {
    labels: ["Label 1", "Label 2", "Label 3"],
    datasets: [
      {
        label: "Current Data",
        data: data,
        backgroundColor: "rgba(75, 192, 192, 0.2)",
        borderColor: "rgba(75, 192, 192, 1)",
        borderWidth: 1,
      },
    ],
  };

  const options = {
    responsive: true,
    plugins: {
      tooltip: {
        enabled: false, // Disable the default tooltip
        external: function (context) {
          // Tooltip Element
          let tooltipEl = document.getElementById("chartjs-tooltip");

          // Create element on first render
          if (!tooltipEl) {
            tooltipEl = document.createElement("div");
            tooltipEl.id = "chartjs-tooltip";
            tooltipEl.innerHTML = "<table></table>";
            document.body.appendChild(tooltipEl);
          }

          // Hide if no tooltip
          const tooltipModel = context.tooltip;
          if (tooltipModel.opacity === 0) {
            tooltipEl.style.opacity = 0;
            return;
          }

          // Set caret Position
          tooltipEl.classList.remove("above", "below", "no-transform");
          if (tooltipModel.yAlign) {
            tooltipEl.classList.add(tooltipModel.yAlign);
          } else {
            tooltipEl.classList.add("no-transform");
          }

          function getBody(bodyItem) {
            return bodyItem.lines;
          }

          // Set Text
          if (tooltipModel.body) {
            const titleLines = tooltipModel.title || [];
            const bodyLines = tooltipModel.body.map(getBody);

            let innerHtml = "<thead>";

            titleLines.forEach(function (title) {
              innerHtml += `<tr><th>${title}</th></tr>`;
            });
            innerHtml += "</thead><tbody>";

            bodyLines.forEach(function (body, i) {
              const line = body[0];
              innerHtml += `<tr><td>${line}</td></tr>`;
            });
            innerHtml += "</tbody>";

            const tableRoot = tooltipEl.querySelector("table");
            tableRoot.innerHTML = innerHtml;
          }

          const position = context.chart.canvas.getBoundingClientRect();

          // Display, position, and set styles for font
          tooltipEl.style.opacity = 1;
          tooltipEl.style.position = "absolute";
          tooltipEl.style.left =
            position.left + window.pageXOffset + tooltipModel.caretX + "px";
          tooltipEl.style.top =
            position.top + window.pageYOffset + tooltipModel.caretY + "px";
          tooltipEl.style.fontFamily = tooltipModel.options.bodyFont.string;
          tooltipEl.style.fontSize = tooltipModel.options.bodyFont.size + "px";
          tooltipEl.style.fontStyle = tooltipModel.options.bodyFont.style;
          tooltipEl.style.padding =
            tooltipModel.padding + "px " + tooltipModel.padding + "px";
          tooltipEl.style.pointerEvents = "none";
        },
        callbacks: {
          label: function (tooltipItem) {
            const index = tooltipItem.dataIndex;
            const currentValue = data[index];
            const prevValue = prevData[index];

            const difference = currentValue - prevValue;
            console.log(difference);
            const diffColor = difference >= 0 ? "green" : "red";

            // Additional details
            // const additionalDetail1 = `Detail 1: ${currentValue + prevValue}`;s

            return [
              `Current Value: ${currentValue}
              Previous Value: ${prevValue}
              
              Difference: <span style="color: ${diffColor}; font-weight: bold;">${difference}</span>`,
            ];
          },
        },
      },
    },
  };

  return <Bar data={chartData} options={options} />;
};

export default StackedBarChart;
